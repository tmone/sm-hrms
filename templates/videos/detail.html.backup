{% extends "base.html" %}

{% block title %}{{ video.filename }} - Video Details{% endblock %}

{% block head %}
{{ super() }}
<!-- Socket.IO Client -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.1/socket.io.js"></script>
{% endblock %}

{% block content %}
<style>
/* Progress bar animations */
@keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.7; }
    100% { opacity: 1; }
}

@keyframes progressGlow {
    0% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.5); }
    50% { box-shadow: 0 0 15px rgba(59, 130, 246, 0.8); }
    100% { box-shadow: 0 0 5px rgba(59, 130, 246, 0.5); }
}

.progress-bar-animated {
    animation: progressGlow 2s ease-in-out infinite;
}

.conversion-status-live {
    animation: pulse 2s infinite;
}

/* Live indicator */
@keyframes liveDot {
    0% { opacity: 0.3; transform: scale(0.8); }
    50% { opacity: 1; transform: scale(1.2); }
    100% { opacity: 0.3; transform: scale(0.8); }
}

.live-indicator {
    animation: liveDot 1.5s infinite;
}
</style>
<div class="container mx-auto px-4">
    <div class="max-w-6xl mx-auto">
        <!-- Header -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-6">
            <div class="flex justify-between items-start">
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">{{ video.title or video.filename }}</h1>
                    <p class="text-gray-600 mt-1">{{ video.description or 'No description provided' }}</p>
                    <div class="flex items-center space-x-4 mt-2 text-sm text-gray-500">
                        <span>{{ (video.file_size / 1024 / 1024) | round(1) }} MB</span>
                        {% if video.duration %}
                            <span>{{ "%.1f"|format(video.duration) }} seconds</span>
                        {% endif %}
                        <span>Uploaded {{ video.created_at.strftime('%b %d, %Y at %H:%M') }}</span>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <span class="inline-flex px-3 py-1 text-sm font-semibold rounded-full 
                          {% if video.status == 'completed' %}bg-green-100 text-green-800
                          {% elif video.status == 'processing' %}bg-yellow-100 text-yellow-800
                          {% elif video.status == 'failed' %}bg-red-100 text-red-800
                          {% else %}bg-gray-100 text-gray-800{% endif %}">
                        {{ video.status.title() }}
                    </span>
                    <a href="{{ url_for('videos.index') }}" 
                       class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Back to Videos
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content: Side-by-Side Layout -->
        <div class="flex flex-col lg:flex-row gap-6">
            <!-- Left Side: Video Player (Always Visible) -->
            <div class="lg:w-2/3">
                <div class="bg-white rounded-lg shadow-md p-6 sticky top-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Video Preview</h2>
                    
                    {% if video.processed_path %}
                        <!-- Show converted video if available -->
                        <video id="videoPlayer" controls class="w-full rounded-lg" preload="metadata" 
                               onloadstart="console.log('üé¨ Loading converted video:', '{{ video.processed_path }}')"
                               oncanplay="console.log('‚úÖ Converted video can play')" 
                               onerror="console.error('‚ùå Converted video error:', event.target.error)"
                               onloadedmetadata="console.log('üìä Video metadata loaded:', {duration: event.target.duration, width: event.target.videoWidth, height: event.target.videoHeight})">
                            <source src="{{ url_for('videos.stream_video', filename=video.processed_path) }}" type="video/mp4">
                            <source src="{{ url_for('videos.serve_video_static', filename=video.processed_path) }}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                        <div class="mt-2 text-sm text-green-600 bg-green-50 p-2 rounded">
                            ‚úÖ <strong>Converted Video:</strong> This video has been automatically converted to web-compatible MP4 format.
                        </div>
                    {% elif video.status == 'uploaded' and video.file_path %}
                        <div id="videoContainer">
                            <video id="videoPlayer" controls class="w-full rounded-lg" onloadstart="handleVideoLoad()" onerror="handleVideoError()">
                                <source src="{{ url_for('videos.stream_video', filename=video.file_path) }}" type="video/mp4">
                                <source src="{{ url_for('videos.serve_video_static', filename=video.file_path) }}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                            
                            <!-- Video Loading/Error States -->
                            <div id="videoLoading" class="bg-gray-100 rounded-lg h-64 flex items-center justify-center hidden">
                                <div class="text-center">
                                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                                    <p class="text-gray-600">Loading video...</p>
                                </div>
                            </div>
                            
                            <div id="videoError" class="bg-red-50 border border-red-200 rounded-lg p-4 mt-4 hidden">
                                <h4 class="text-sm font-medium text-red-800 mb-2">üö´ Video Format Not Supported</h4>
                                <div class="text-sm text-red-600 mb-3">
                                    <p>This video file appears to be in IMKH format, which is not supported by web browsers.</p>
                                    <p class="mt-2"><strong>Solutions:</strong></p>
                                    <ul class="list-disc ml-4 mt-1">
                                        <li>Convert to MP4 format using FFmpeg</li>
                                        <li>Use VLC Media Player to view the original file</li>
                                        <li>Contact your video source provider for a web-compatible version</li>
                                    </ul>
                                </div>
                                <div class="space-y-2">
                                    <button onclick="showConversionInstructions()" class="text-sm bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700">
                                        üìù Show Conversion Instructions
                                    </button>
                                    <a href="{{ url_for('videos.download_video', filename=video.file_path) }}" 
                                       class="text-sm bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700 inline-block">
                                        üì• Download Original File
                                    </a>
                                    <button onclick="openDiagnosticTool()" class="text-sm bg-purple-600 text-white px-3 py-1 rounded hover:bg-purple-700">
                                        üîç Open Diagnostic Tool
                                    </button>
                                </div>
                            </div>
                            
                            <div id="conversionInstructions" class="bg-blue-50 border border-blue-200 rounded-lg p-4 mt-4 hidden">
                                <h4 class="text-sm font-medium text-blue-800 mb-2">üõ†Ô∏è Video Conversion Instructions</h4>
                                <div class="text-sm text-blue-700">
                                    <p class="mb-2"><strong>Option 1: Using FFmpeg (Recommended)</strong></p>
                                    <ol class="list-decimal ml-4 mb-3">
                                        <li>Install FFmpeg from <a href="https://ffmpeg.org/download.html" target="_blank" class="underline">ffmpeg.org</a></li>
                                        <li>Open command line in the video file directory</li>
                                        <li>Run: <code class="bg-gray-200 px-1 rounded">ffmpeg -i input.mp4 -c:v libx264 -c:a aac -preset medium -crf 23 output.mp4</code></li>
                                    </ol>
                                    
                                    <p class="mb-2"><strong>Option 2: Using Online Converters</strong></p>
                                    <ul class="list-disc ml-4 mb-3">
                                        <li>CloudConvert, Online-Convert, or similar services</li>
                                        <li>Upload your file and convert to MP4</li>
                                    </ul>
                                    
                                    <p class="mb-2"><strong>Option 3: Video Editing Software</strong></p>
                                    <ul class="list-disc ml-4">
                                        <li>VLC Media Player (free)</li>
                                        <li>HandBrake (free)</li>
                                        <li>Adobe Premiere, Final Cut Pro, etc.</li>
                                    </ul>
                                </div>
                                <button onclick="hideConversionInstructions()" class="text-sm bg-gray-600 text-white px-3 py-1 rounded hover:bg-gray-700 mt-2">
                                    Hide Instructions
                                </button>
                            </div>
                        </div>
                        
                        <!-- Video Information -->
                        <div class="mt-4 text-sm text-gray-600">
                            <p><strong>File:</strong> {{ video.filename }}</p>
                            <p><strong>Size:</strong> {{ (video.file_size / 1024 / 1024) | round(1) }} MB</p>
                            {% if video.duration %}
                                <p><strong>Duration:</strong> {{ "%.1f"|format(video.duration) }} seconds</p>
                            {% endif %}
                        </div>
                    {% else %}
                        <div class="bg-gray-100 rounded-lg h-64 flex items-center justify-center">
                            {% if video.status == 'processing' %}
                                <div class="text-center">
                                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
                                    <p class="text-gray-600 mb-4">Extracting persons from video...</p>
                                    
                                    <!-- Progress Bar -->
                                    <div class="max-w-md mx-auto">
                                        <div class="flex justify-between text-sm text-blue-600 mb-2">
                                            <span>Progress</span>
                                            <span id="processingPercent">0%</span>
                                        </div>
                                        <div class="w-full bg-blue-200 rounded-full h-3 overflow-hidden">
                                            <div id="processingProgressBar" class="bg-blue-600 h-3 rounded-full transition-all duration-300" style="width: 0%"></div>
                                        </div>
                                        <div class="text-sm text-blue-600 mt-2">
                                            <div id="processingMessage">Initializing person extraction...</div>
                                        </div>
                                        
                                        <!-- Cancel Button -->
                                        <div class="mt-4">
                                            <form action="{{ url_for('videos.cancel_processing', id=video.id) }}" method="POST" class="inline">
                                                <button type="submit" class="px-4 py-2 bg-red-600 text-white text-sm rounded hover:bg-red-700" onclick="return confirm('Cancel person extraction? This will stop the current process and allow you to retry.')">
                                                    üõë Cancel Processing
                                                </button>
                                            </form>
                                            
                                            <!-- Debug Progress Test Button (Development Only) -->
                                            {% if config.DEBUG or video.status == 'processing' %}
                                            <button onclick="testProgressUI()" class="ml-2 px-3 py-1 bg-gray-500 text-white text-xs rounded hover:bg-gray-600">
                                                üß™ Test Progress UI
                                            </button>
                                            {% endif %}
                                        </div>
                                    </div>
                                </div>
                            {% elif video.status == 'failed' %}
                                <div class="text-center">
                                    <svg class="mx-auto h-12 w-12 text-red-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    <p class="text-gray-600">Processing failed</p>
                                    <p class="text-sm text-red-600 mt-1">{{ video.error_message or 'Unknown error' }}</p>
                                </div>
                            {% else %}
                                <div class="text-center">
                                    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 002 2v8a2 2 0 002 2z"></path>
                                    </svg>
                                    <p class="text-gray-600">Video preview not available</p>
                                </div>
                            {% endif %}
                        </div>
                    {% endif %}
                </div>

                <!-- Processing Details -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Processing Details</h2>
                    
                    <div class="grid grid-cols-2 gap-4 mb-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Processing Status</label>
                            <p class="mt-1 text-sm text-gray-900">{{ video.status.title() }}</p>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Priority</label>
                            <p class="mt-1 text-sm text-gray-900">{{ video.priority.title() if video.priority else 'Normal' }}</p>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Started</label>
                            <p class="mt-1 text-sm text-gray-900">
                                {% if video.processing_started_at %}
                                    {{ video.processing_started_at.strftime('%b %d, %Y at %H:%M') }}
                                {% else %}
                                    Not started
                                {% endif %}
                            </p>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-500">Completed</label>
                            <p class="mt-1 text-sm text-gray-900">
                                {% if video.processing_completed_at %}
                                    {{ video.processing_completed_at.strftime('%b %d, %Y at %H:%M') }}
                                {% else %}
                                    Not completed
                                {% endif %}
                            </p>
                        </div>
                    </div>
                    
                    {% if video.status == 'failed' and video.error_message %}
                        <div class="bg-red-50 border border-red-200 rounded-md p-4">
                            <h4 class="text-sm font-medium text-red-800">Error Details</h4>
                            <p class="mt-1 text-sm text-red-700">{{ video.error_message }}</p>
                        </div>
                    {% endif %}
                    
                    <!-- Video Controls and Info -->
                    <div class="mt-4 text-sm text-gray-600">
                        <div class="flex justify-between items-center">
                            <div>
                                <span id="currentTimeDisplay">0:00</span> / <span id="durationDisplay">0:00</span>
                            </div>
                            <div id="detectionCounter" class="text-blue-600 font-medium">
                                No detection at current frame
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Side: Detection Navigation Panel -->
            <div class="lg:w-1/3">
                <div class="bg-white rounded-lg shadow-md">
                    <!-- Header with Stats -->
                    <div class="p-4 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-800 mb-2">Detection Navigator</h2>
                        <div class="flex justify-between text-sm text-gray-600">
                            <span>{{ detections|length }} persons detected</span>
                            <span>{{ detections|selectattr('is_identified')|list|length }} identified</span>
                        </div>
                    </div>
                    
                    <!-- Detection List (Scrollable) -->
                    {% if detections %}
                    <div class="max-h-96 overflow-y-auto">
                        {% for detection in detections %}
                        <div class="detection-item p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer transition-colors"
                             data-detection-id="{{ detection.id }}"
                             data-timestamp="{{ detection.timestamp }}"
                             data-bbox-x="{{ detection.bbox_x }}"
                             data-bbox-y="{{ detection.bbox_y }}"
                             data-bbox-width="{{ detection.bbox_width }}"
                             data-bbox-height="{{ detection.bbox_height }}"
                             onclick="navigateToDetection({{ detection.timestamp }}, {{ detection.id }}, {{ detection.bbox_x }}, {{ detection.bbox_y }}, {{ detection.bbox_width }}, {{ detection.bbox_height }})">
                            
                            <div class="flex justify-between items-start">
                                <div class="flex-1">
                                    <div class="font-medium text-gray-900">PERSON-{{ "%04d"|format(loop.index) }}</div>
                                    <div class="text-sm text-gray-600">{{ "%.2f"|format(detection.timestamp) }}s</div>
                                    <div class="text-xs text-gray-500">
                                        Confidence: {{ "%.1f"|format(detection.confidence * 100) }}%
                                    </div>
                                    {% if detection.is_identified %}
                                    <div class="text-xs text-green-600 font-medium">‚úÖ Identified</div>
                                    {% endif %}
                                </div>
                                <div class="ml-2">
                                    <button class="text-blue-600 hover:text-blue-800 text-sm font-medium"
                                            onclick="event.stopPropagation(); navigateToDetection({{ detection.timestamp }}, {{ detection.id }}, {{ detection.bbox_x }}, {{ detection.bbox_y }}, {{ detection.bbox_width }}, {{ detection.bbox_height }})">
                                        üéØ Go
                                    </button>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    {% else %}
                    <div class="p-6 text-center text-gray-500">
                        No persons detected yet.
                        {% if video.status in ['uploaded', 'completed', 'failed'] %}
                        Start person extraction to see detections here.
                        {% endif %}
                    </div>
                    {% endif %}
                </div>
                
                <!-- Processing Controls -->
                <div class="mt-6 space-y-4">
                <!-- Quick Stats -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Detection Results</h2>
                    
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Persons Detected</span>
                            <span class="text-sm font-medium text-gray-900">{{ detections|length }}</span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Identified</span>
                            <span class="text-sm font-medium text-gray-900">
                                {{ detections|selectattr('is_identified')|list|length }}
                            </span>
                        </div>
                        
                        <div class="flex justify-between">
                            <span class="text-sm text-gray-600">Confidence Score</span>
                            <span class="text-sm font-medium text-gray-900">
                                {% if detections %}
                                    {{ "%.1f"|format((detections|sum(attribute='confidence')/detections|length)*100) }}%
                                {% else %}
                                    --
                                {% endif %}
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Actions -->
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Actions</h2>
                    
                    <div class="space-y-3">
                        {% if video.status == 'uploaded' or (video.status == 'completed' and video.processed_path) %}
                            <!-- Status message for web-compatible videos -->
                            <div class="bg-green-50 border border-green-200 rounded-md p-4 mb-3">
                                {% if video.processed_path %}
                                    <h4 class="text-sm font-medium text-green-800 mb-2">‚úÖ Converted Video Ready</h4>
                                    <p class="text-sm text-green-700 mb-3">This video has been automatically converted to web-compatible MP4 format and is ready for processing.</p>
                                {% else %}
                                    <h4 class="text-sm font-medium text-green-800 mb-2">‚úÖ Web-Compatible Format</h4>
                                    <p class="text-sm text-green-700 mb-3">This video is already in a web-compatible format and ready to play.</p>
                                {% endif %}
                            </div>
                            
                            <!-- Process Video Form -->
                            <form action="{{ url_for('videos.process_video', id=video.id) }}" method="POST" class="space-y-3">
                                <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                                    <h4 class="text-sm font-medium text-blue-800 mb-3">Process Video Options</h4>
                                    
                                    {% if video.detected_persons and video.detected_persons|length > 0 %}
                                    <div class="bg-amber-50 border border-amber-200 rounded p-2 mb-3">
                                        <p class="text-xs text-amber-700">
                                            ‚ö†Ô∏è <strong>Note:</strong> This video has {{ video.detected_persons|length }} existing detection(s). 
                                            Processing will <strong>clear all existing data</strong> and re-extract persons from scratch.
                                        </p>
                                    </div>
                                    {% endif %}
                                    
                                    <div class="space-y-2">
                                        <label class="flex items-center">
                                            <input type="checkbox" name="extract_persons" value="true" checked class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Extract persons from video</span>
                                        </label>
                                        
                                        <label class="flex items-center">
                                            <input type="checkbox" name="face_recognition" value="true" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Run face recognition</span>
                                        </label>
                                        
                                        <label class="flex items-center">
                                            <input type="checkbox" name="extract_frames" value="true" class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Extract key frames</span>
                                        </label>
                                    </div>
                                </div>
                                
                                <button type="submit" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700" onclick="return confirm('Start person extraction for this video?{% if video.detected_persons and video.detected_persons|length > 0 %} This will delete {{ video.detected_persons|length }} existing detection(s) and start fresh.{% endif %}')">
                                    Process Video
                                </button>
                            </form>
                        {% elif video.status == 'converting' %}
                            <div class="bg-blue-50 border border-blue-200 rounded-md p-4">
                                <h4 class="text-sm font-medium text-blue-800 mb-2">üîÑ Auto-Converting Video</h4>
                                <div class="flex items-center mb-3">
                                    <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-2"></div>
                                    <span class="text-sm text-blue-700">Automatically converting to web-compatible MP4 format...</span>
                                </div>
                                
                                <!-- Progress Bar -->
                                <div class="mb-3">
                                    <div class="flex justify-between text-xs text-blue-600 mb-1">
                                        <span>Progress</span>
                                        <span id="progressPercent">0%</span>
                                    </div>
                                    <div class="w-full bg-blue-200 rounded-full h-2 overflow-hidden">
                                        <div id="progressBar" class="bg-blue-600 h-2 rounded-full transition-all duration-300 progress-bar-animated" style="width: 0%"></div>
                                    </div>
                                </div>
                                
                                <!-- Progress Message -->
                                <div class="text-xs text-blue-600 mb-3">
                                    <div id="progressMessage">This video was detected as non-web-compatible and is being converted automatically...</div>
                                    <div class="mt-1">
                                        Started: {{ video.processing_started_at.strftime('%H:%M:%S') if video.processing_started_at }}
                                    </div>
                                </div>
                                
                                <!-- Real-time Status -->
                                <div id="conversionProgress" class="text-xs text-blue-600 bg-blue-100 p-2 rounded">
                                    <div class="flex items-center">
                                        <div class="h-2 w-2 bg-blue-600 rounded-full mr-2 live-indicator"></div>
                                        <span id="liveStatus" class="conversion-status-live">Checking conversion status...</span>
                                    </div>
                                </div>
                                
                                <!-- Debug Panel (only visible in converting state) -->
                                <div id="debugPanel" class="mt-4 p-3 bg-gray-100 rounded text-xs text-gray-600">
                                    <div class="font-medium mb-2">üîß Debug Information:</div>
                                    <div id="debugInfo">
                                        <div>‚Ä¢ Status: <span id="debugStatus">Unknown</span></div>
                                        <div>‚Ä¢ Progress: <span id="debugProgress">0%</span></div>
                                        <div>‚Ä¢ Message: <span id="debugMessage">No message</span></div>
                                        <div>‚Ä¢ Last Update: <span id="debugLastUpdate">Never</span></div>
                                        <div>‚Ä¢ API Calls: <span id="debugApiCalls">0</span></div>
                                        <div>‚Ä¢ Task ID: <span id="debugTaskId">None</span></div>
                                        <div>‚Ä¢ WebSocket: <span id="debugWebSocket">Disconnected</span></div>
                                        <div>‚Ä¢ Connection: <span id="debugConnection">AJAX Polling</span></div>
                                    </div>
                                    <button onclick="toggleDebugPanel()" class="mt-2 text-xs bg-gray-300 px-2 py-1 rounded">Hide Debug</button>
                                </div>
                            </div>
                        {% elif video.status == 'processing' %}
                            <!-- Processing status with cancel option -->
                            <div class="bg-yellow-50 border border-yellow-200 rounded-md p-4 mb-3">
                                <h4 class="text-sm font-medium text-yellow-800 mb-2">‚è≥ Person Extraction In Progress</h4>
                                <p class="text-sm text-yellow-700 mb-3">
                                    The system is currently extracting persons from this video. 
                                    {% if video.processing_started_at %}
                                        Started: {{ video.processing_started_at.strftime('%b %d at %H:%M') }}
                                    {% endif %}
                                </p>
                                <p class="text-xs text-yellow-600">
                                    If the process appears stuck, you can cancel and retry.
                                </p>
                            </div>
                            
                            <!-- Cancel Processing -->
                            <form action="{{ url_for('videos.cancel_processing', id=video.id) }}" method="POST">
                                <button type="submit" class="w-full px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700" onclick="return confirm('Cancel person extraction? This will stop the current process and reset the video so you can retry.')">
                                    üõë Cancel Processing
                                </button>
                            </form>
                        {% elif video.status == 'completed' %}
                            <button class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700">
                                Run Face Recognition
                            </button>
                            
                            <button class="w-full px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700">
                                Export Results
                            </button>
                        {% elif video.status == 'failed' %}
                            <!-- Error status message -->
                            <div class="bg-red-50 border border-red-200 rounded-md p-4 mb-3">
                                <h4 class="text-sm font-medium text-red-800 mb-2">‚ùå Person Extraction Failed</h4>
                                <p class="text-sm text-red-700 mb-3">
                                    {% if video.error_message %}
                                        Error: {{ video.error_message }}
                                    {% else %}
                                        The person extraction process failed. You can retry with the same or different options.
                                    {% endif %}
                                </p>
                                
                                {% if video.processing_completed_at %}
                                    <p class="text-xs text-red-600">
                                        Failed at: {{ video.processing_completed_at.strftime('%b %d, %Y at %H:%M') }}
                                    </p>
                                {% endif %}
                            </div>
                            
                            <!-- Retry Processing Form -->
                            <form action="{{ url_for('videos.process_video', id=video.id) }}" method="POST" class="space-y-3">
                                <div class="bg-yellow-50 border border-yellow-200 rounded-md p-4">
                                    <h4 class="text-sm font-medium text-yellow-800 mb-3">üîÑ Retry Person Extraction</h4>
                                    
                                    {% if video.detected_persons and video.detected_persons|length > 0 %}
                                    <div class="bg-red-50 border border-red-200 rounded p-2 mb-3">
                                        <p class="text-xs text-red-700">
                                            ‚ö†Ô∏è <strong>Warning:</strong> This video has {{ video.detected_persons|length }} existing detection(s). 
                                            Retry will <strong>delete all existing data</strong> and start fresh person extraction.
                                        </p>
                                    </div>
                                    {% endif %}
                                    
                                    <div class="space-y-2">
                                        <label class="flex items-center">
                                            <input type="checkbox" name="extract_persons" value="true" checked class="rounded border-gray-300 text-yellow-600 shadow-sm focus:border-yellow-300 focus:ring focus:ring-yellow-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Extract persons from video</span>
                                        </label>
                                        
                                        <label class="flex items-center">
                                            <input type="checkbox" name="face_recognition" value="true" class="rounded border-gray-300 text-yellow-600 shadow-sm focus:border-yellow-300 focus:ring focus:ring-yellow-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Run face recognition</span>
                                        </label>
                                        
                                        <label class="flex items-center">
                                            <input type="checkbox" name="extract_frames" value="true" class="rounded border-gray-300 text-yellow-600 shadow-sm focus:border-yellow-300 focus:ring focus:ring-yellow-200 focus:ring-opacity-50">
                                            <span class="ml-2 text-sm text-gray-700">Extract key frames</span>
                                        </label>
                                    </div>
                                </div>
                                
                                <button type="submit" class="w-full px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700" onclick="return confirm('Retry person extraction for this video?{% if video.detected_persons and video.detected_persons|length > 0 %} This will permanently delete {{ video.detected_persons|length }} existing detection(s) and start fresh extraction.{% endif %}')">
                                    üîÑ Retry Person Extraction
                                </button>
                            </form>
                        {% endif %}
                        
                        <button class="w-full px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Download Original
                        </button>
                        
                        <button class="w-full px-4 py-2 border border-red-300 rounded-md text-red-700 hover:bg-red-50">
                            Delete Video
                        </button>
                        
                        <!-- Temporary testing button (remove in production) -->
                        {% if video.status in ['uploaded', 'completed'] %}
                        <form action="{{ url_for('videos.simulate_error', id=video.id) }}" method="POST" class="mt-2">
                            <button type="submit" class="w-full px-4 py-2 border border-orange-300 rounded-md text-orange-700 hover:bg-orange-50 text-sm" onclick="return confirm('Simulate an error to test retry functionality?')">
                                üß™ Simulate Error (Testing)
                            </button>
                        </form>
                        {% endif %}
                    </div>
                </div>

                <!-- Processing Log -->
                {% if video.processing_log %}
                <div class="bg-white rounded-lg shadow-md p-6">
                    <h2 class="text-lg font-semibold text-gray-800 mb-4">Processing Log</h2>
                    
                    <div class="bg-gray-50 rounded-md p-3 max-h-32 overflow-y-auto">
                        <pre class="text-xs text-gray-700 whitespace-pre-wrap">{{ video.processing_log }}</pre>
                    </div>
                </div>
                {% endif %}
            </div>
        </div>

            
                    <tbody class="bg-white divide-y divide-gray-200">
                        {% for detection in detections %}
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {{ "%.2f"|format(detection.timestamp) }}s
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {{ "%.1f"|format(detection.confidence * 100) }}%
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                {% if detection.is_identified and detection.employee %}
                                    <span class="text-blue-600">{{ detection.employee.name }}</span>
                                {% else %}
                                    <span class="text-gray-400">Unknown</span>
                                {% endif %}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                {% if detection.bbox_x is number and detection.bbox_y is number and detection.bbox_width is number and detection.bbox_height is number %}
                                    {{ detection.bbox_x }}, {{ detection.bbox_y }}, 
                                    {{ detection.bbox_width }}x{{ detection.bbox_height }}
                                {% else %}
                                    <span class="text-red-500">Invalid bbox data</span>
                                {% endif %}
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                {% if not detection.is_identified %}
                                    {% if detection.bbox_x is number and detection.bbox_y is number and detection.bbox_width is number and detection.bbox_height is number and detection.timestamp is number %}
                                        <button onclick="jumpToDetection({{ detection.timestamp }}, {{ detection.id }}, {{ detection.bbox_x }}, {{ detection.bbox_y }}, {{ detection.bbox_width }}, {{ detection.bbox_height }})" 
                                                class="text-blue-600 hover:text-blue-900 mr-2"
                                                data-detection-id="{{ detection.id }}"
                                                data-timestamp="{{ detection.timestamp }}"
                                                data-bbox-x="{{ detection.bbox_x }}"
                                                data-bbox-y="{{ detection.bbox_y }}" 
                                                data-bbox-width="{{ detection.bbox_width }}"
                                                data-bbox-height="{{ detection.bbox_height }}">
                                            üéØ Go to Frame
                                        </button>
                                    {% else %}
                                        <span class="text-red-500">‚ùå Invalid data</span>
                                    {% endif %}
                                    <button onclick="identifyPerson({{ detection.id }})" 
                                            class="text-green-600 hover:text-green-900">
                                        üë§ Identify
                                    </button>
                                {% else %}
                                    <span class="text-gray-400">‚úÖ Identified</span>
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
        {% endif %}
    </div>
</div>

<script>
function handleVideoLoad() {
    console.log('Video loading started...');
    const loading = document.getElementById('videoLoading');
    const error = document.getElementById('videoError');
    if (loading) loading.classList.add('hidden');
    if (error) error.classList.add('hidden');
}

function handleVideoError() {
    console.log('Video error occurred');
    const video = document.getElementById('videoPlayer');
    const error = document.getElementById('videoError');
    if (error) {
        error.classList.remove('hidden');
    }
    if (video) {
        video.style.display = 'none';
    }
}

function tryAlternativePlayback() {
    const video = document.getElementById('videoPlayer');
    const error = document.getElementById('videoError');
    
    if (video) {
        // Try different serving method
        const filename = '{{ video.file_path }}';
        video.innerHTML = `
            <source src="{{ url_for('videos.serve_video_static', filename='') }}${filename}" type="application/octet-stream">
            <source src="{{ url_for('videos.download_video', filename='') }}${filename}" type="application/octet-stream">
        `;
        video.style.display = 'block';
        video.load();
        
        if (error) {
            error.classList.add('hidden');
        }
        
        // Show loading state
        const loading = document.getElementById('videoLoading');
        if (loading) {
            loading.classList.remove('hidden');
        }
        
        // Set timeout to show error again if still failing
        setTimeout(() => {
            if (video.readyState === 0) {
                handleVideoError();
                if (loading) loading.classList.add('hidden');
            }
        }, 5000);
    }
}

function showConversionInstructions() {
    document.getElementById('conversionInstructions').classList.remove('hidden');
}

function hideConversionInstructions() {
    document.getElementById('conversionInstructions').classList.add('hidden');
}

function openDiagnosticTool() {
    window.open('/static/video_test.html', '_blank');
}

function checkConversionStatus() {
    const videoId = {{ video.id }};
    
    console.log(`üîç Checking conversion status for video ${videoId}...`);
    
    fetch(`/videos/api/${videoId}/conversion-status`)
        .then(response => {
            console.log(`üì° API Response status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            console.log('üìä Conversion status data received:', data);
            console.log('üìä Data details:', {
                status: data.status,
                progress: data.progress,
                message: data.progress_message,
                taskId: data.task_id,
                timestamp: new Date().toLocaleTimeString()
            });
            updateProgressUI(data);
        })
        .catch(error => {
            console.error('‚ùå Error checking conversion status:', error);
            const liveStatus = document.getElementById('liveStatus');
            if (liveStatus) {
                liveStatus.textContent = '‚ö†Ô∏è Error checking status. Please refresh the page.';
            }
        });
}

function updateProgressUI(data) {
    console.log('üé® Updating progress UI with data:', data);
    
    const progressBar = document.getElementById('progressBar');
    const progressPercent = document.getElementById('progressPercent');
    const progressMessage = document.getElementById('progressMessage');
    const liveStatus = document.getElementById('liveStatus');
    
    // Update debug information
    updateDebugInfo(data);
    
    // Log current UI elements
    console.log('üìã UI Elements found:', {
        progressBar: !!progressBar,
        progressPercent: !!progressPercent, 
        progressMessage: !!progressMessage,
        liveStatus: !!liveStatus
    });
    
    if (data.status === 'completed') {
        console.log('‚úÖ Conversion completed!');
        if (progressBar) progressBar.style.width = '100%';
        if (progressPercent) progressPercent.textContent = '100%';
        if (progressMessage) progressMessage.textContent = 'Conversion completed successfully!';
        if (liveStatus) liveStatus.innerHTML = '‚úÖ Conversion completed! Reloading page...';
        
        // Clear the progress interval and disconnect WebSocket
        if (window.conversionProgressInterval) {
            clearInterval(window.conversionProgressInterval);
            window.conversionProgressInterval = null;
        }
        
        if (socket) {
            socket.emit('leave_video_room', { video_id: {{ video.id }} });
        }
        
        setTimeout(() => location.reload(), 2000);
        
    } else if (data.status === 'failed') {
        console.log('‚ùå Conversion failed:', data.error_message);
        if (progressBar) progressBar.style.width = '0%';
        if (progressPercent) progressPercent.textContent = '0%';
        if (progressMessage) progressMessage.textContent = 'Conversion failed';
        if (liveStatus) liveStatus.innerHTML = `‚ùå Conversion failed: ${data.error_message || 'Unknown error'}`;
        
        // Clear the progress interval and disconnect WebSocket
        if (window.conversionProgressInterval) {
            clearInterval(window.conversionProgressInterval);
            window.conversionProgressInterval = null;
        }
        
        if (socket) {
            socket.emit('leave_video_room', { video_id: {{ video.id }} });
        }
        
    } else if (data.status === 'converting') {
        const progress = data.progress || 0;
        const message = data.progress_message || 'Converting...';
        
        console.log(`üîÑ Converting: ${progress.toFixed(1)}% - ${message}`);
        
        // Update progress bar with animation
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
            progressBar.style.transition = 'width 0.3s ease-in-out';
        }
        if (progressPercent) progressPercent.textContent = `${progress.toFixed(1)}%`;
        
        // Update messages
        if (progressMessage) progressMessage.textContent = message;
        
        // Calculate elapsed time
        const elapsed = data.processing_started_at ? 
            Math.round((new Date() - new Date(data.processing_started_at)) / 1000) : 0;
        
        const elapsedMinutes = Math.floor(elapsed / 60);
        const elapsedSeconds = elapsed % 60;
        const elapsedText = elapsedMinutes > 0 ? 
            `${elapsedMinutes}m ${elapsedSeconds}s` : `${elapsedSeconds}s`;
        
        if (liveStatus) {
            liveStatus.innerHTML = `üîÑ ${message} (${elapsedText} elapsed)`;
        }
        
        // Update page title to show progress
        document.title = `Converting ${progress.toFixed(1)}% - ${message}`;
        
        // Visual feedback: pulse effect on high progress
        if (progress > 80 && progressBar) {
            progressBar.style.animation = 'pulse 1s infinite';
        } else if (progressBar) {
            progressBar.style.animation = 'none';
        }
        
    } else {
        console.log('‚ö†Ô∏è Unknown status:', data.status);
        if (liveStatus) {
            liveStatus.textContent = `Status: ${data.status}`;
        }
    }
}

// WebSocket connection for real-time progress updates
let socket = null;

function initializeWebSocket() {
    const videoId = {{ video.id }};
    const videoStatus = '{{ video.status }}';
    
    console.log('üì° Initializing WebSocket connection...');
    
    // Initialize Socket.IO connection
    socket = io();
    
    socket.on('connect', function() {
        console.log('üì° WebSocket connected');
        
        // Join the video-specific room for updates
        socket.emit('join_video_room', { video_id: videoId });
        
        // Request current status
        socket.emit('request_video_status', { video_id: videoId });
    });
    
    socket.on('disconnect', function() {
        console.log('üì° WebSocket disconnected');
    });
    
    socket.on('status', function(data) {
        console.log('üì° WebSocket status:', data.message);
    });
    
    socket.on('conversion_progress', function(data) {
        console.log('üîÑ WebSocket progress update:', data);
        
        // Only process updates for this video
        if (data.video_id === videoId) {
            updateProgressUI(data);
        }
    });
    
    socket.on('video_status', function(data) {
        console.log('üìä WebSocket video status:', data);
        
        // Process current status response
        if (data.video_id === videoId) {
            updateProgressUI(data);
        }
    });
    
    // Handle connection errors
    socket.on('connect_error', function(error) {
        console.error('üì° WebSocket connection error:', error);
        console.log('üì° Falling back to AJAX polling...');
        
        // Fallback to AJAX polling if WebSocket fails
        if (videoStatus === 'converting') {
            setupAjaxPolling();
        }
    });
}

function setupAjaxPolling() {
    console.log('üîÑ Setting up AJAX polling fallback...');
    
    // Initial check immediately
    checkConversionStatus();
    
    // Check status every 3 seconds for frequent updates
    const progressInterval = setInterval(function() {
        checkConversionStatus();
    }, 3000);
    
    // Store interval ID so we can clear it if needed
    window.conversionProgressInterval = progressInterval;
    
    // Clear interval when page is hidden/unloaded
    document.addEventListener('visibilitychange', function() {
        if (document.hidden && window.conversionProgressInterval) {
            clearInterval(window.conversionProgressInterval);
            console.log('‚è∏Ô∏è Paused progress tracking (page hidden)');
        } else if (!document.hidden && '{{ video.status }}' === 'converting') {
            // Resume when page becomes visible again
            window.conversionProgressInterval = setInterval(checkConversionStatus, 3000);
            console.log('‚ñ∂Ô∏è Resumed progress tracking (page visible)');
        }
    });
}

// Initialize real-time updates
document.addEventListener('DOMContentLoaded', function() {
    const videoStatus = '{{ video.status }}';
    
    if (videoStatus === 'converting') {
        console.log('üîÑ Video is converting, setting up real-time progress tracking...');
        
        // Try WebSocket first, fallback to AJAX polling
        if (typeof io !== 'undefined') {
            initializeWebSocket();
        } else {
            console.log('üì° Socket.IO not available, using AJAX polling...');
            setupAjaxPolling();
        }
    } else if (videoStatus === 'processing') {
        console.log('üîÑ Video is processing (person extraction), setting up progress tracking...');
        setupProcessingPolling();
    }
});

function setupProcessingPolling() {
    console.log('üîÑ Setting up person extraction progress polling...');
    
    // Track polling state
    window.processingPollCount = 0;
    window.processingStartTime = Date.now();
    window.lastProgressUpdate = Date.now();
    window.maxPollAttempts = 300; // 10 minutes at 2-second intervals
    window.stuckTimeout = 60000; // 60 seconds without progress = stuck
    
    // Initial check immediately
    checkProcessingStatus();
    
    // Check status every 2 seconds for frequent updates
    const processingInterval = setInterval(function() {
        checkProcessingStatus();
    }, 2000);
    
    // Store interval ID so we can clear it if needed
    window.processingProgressInterval = processingInterval;
    
    // Clear interval when page is hidden/unloaded
    document.addEventListener('visibilitychange', function() {
        if (document.hidden && window.processingProgressInterval) {
            clearInterval(window.processingProgressInterval);
            console.log('‚è∏Ô∏è Paused person extraction tracking (page hidden)');
        } else if (!document.hidden && '{{ video.status }}' === 'processing') {
            // Resume when page becomes visible again
            window.processingProgressInterval = setInterval(checkProcessingStatus, 2000);
            console.log('‚ñ∂Ô∏è Resumed person extraction tracking (page visible)');
        }
    });
}

function checkProcessingStatus() {
    const videoId = {{ video.id }};
    
    window.processingPollCount++;
    const elapsedTime = Date.now() - window.processingStartTime;
    const timeSinceLastUpdate = Date.now() - window.lastProgressUpdate;
    
    console.log(`üîç Checking person extraction status for video ${videoId} (attempt ${window.processingPollCount}, elapsed: ${Math.round(elapsedTime/1000)}s)`);
    
    // Check for timeout scenarios
    if (window.processingPollCount > window.maxPollAttempts) {
        console.error('‚è∞ Processing timeout: exceeded maximum poll attempts');
        showProcessingError('Processing timed out after 10 minutes', true);
        return;
    }
    
    if (timeSinceLastUpdate > window.stuckTimeout) {
        console.error('‚è∞ Processing appears stuck: no progress for over 60 seconds');
        showProcessingError('Processing appears stuck. No progress detected for over 1 minute.', true);
        return;
    }
    
    fetch(`/videos/api/${videoId}/processing-status`)
        .then(response => {
            console.log(`üì° Processing API Response status: ${response.status}`);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('üìä Person extraction status data received:', data);
            console.log('   üîß Data details:', JSON.stringify(data, null, 2));
            updateProcessingUI(data);
        })
        .catch(error => {
            console.error('‚ùå Error checking person extraction status:', error);
            
            // After 3 consecutive failures, show error UI
            window.consecutiveFailures = (window.consecutiveFailures || 0) + 1;
            
            if (window.consecutiveFailures >= 3) {
                showProcessingError('Network error: Unable to check processing status', true);
            } else {
                const message = document.getElementById('processingMessage');
                if (message) {
                    message.textContent = `‚ö†Ô∏è Connection error (${window.consecutiveFailures}/3). Retrying...`;
                }
            }
        });
}

function updateProcessingUI(data) {
    console.log('üé® Updating person extraction UI with data:', data);
    
    const progressBar = document.getElementById('processingProgressBar');
    const progressPercent = document.getElementById('processingPercent');
    const progressMessage = document.getElementById('processingMessage');
    
    // Reset consecutive failures on successful response
    window.consecutiveFailures = 0;
    
    // Log current UI elements
    console.log('üìã Processing UI Elements found:', {
        progressBar: !!progressBar,
        progressPercent: !!progressPercent, 
        progressMessage: !!progressMessage
    });
    
    if (data.status === 'completed') {
        console.log('‚úÖ Person extraction completed!');
        if (progressBar) progressBar.style.width = '100%';
        if (progressPercent) progressPercent.textContent = '100%';
        if (progressMessage) progressMessage.textContent = 'Person extraction completed successfully!';
        
        // Clear the progress interval
        if (window.processingProgressInterval) {
            clearInterval(window.processingProgressInterval);
            window.processingProgressInterval = null;
        }
        
        setTimeout(() => location.reload(), 2000);
        
    } else if (data.status === 'failed') {
        console.log('‚ùå Person extraction failed:', data.error_message);
        showProcessingError(data.error_message || 'Unknown error', true);
        
    } else if (data.status === 'processing') {
        const progress = data.progress || 0;
        const message = data.progress_message || 'Processing...';
        
        console.log(`üîÑ Person extraction: ${progress.toFixed(1)}% - ${message}`);
        
        // Track progress updates for stuck detection
        const currentProgress = Math.floor(progress);
        if (currentProgress > (window.lastProgress || 0)) {
            window.lastProgress = currentProgress;
            window.lastProgressUpdate = Date.now();
        }
        
        // Update progress bar with animation
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
            progressBar.style.transition = 'width 0.3s ease-in-out';
            
            // Add visual feedback when progress updates
            if (progress > (window.lastVisualProgress || 0)) {
                progressBar.style.backgroundColor = '#22c55e'; // Green flash
                setTimeout(() => {
                    progressBar.style.backgroundColor = '#2563eb'; // Back to blue
                }, 300);
                window.lastVisualProgress = progress;
            }
            
            console.log(`   üìä Updated progress bar to ${progress}%`);
        } else {
            console.warn('   ‚ö†Ô∏è Progress bar element not found!');
        }
        
        if (progressPercent) {
            progressPercent.textContent = `${progress.toFixed(1)}%`;
            console.log(`   üî¢ Updated progress text to ${progress.toFixed(1)}%`);
        } else {
            console.warn('   ‚ö†Ô∏è Progress percent element not found!');
        }
        
        // Update messages
        if (progressMessage) {
            progressMessage.textContent = message;
            console.log(`   üí¨ Updated progress message to: ${message}`);
        } else {
            console.warn('   ‚ö†Ô∏è Progress message element not found!');
        }
        
        // Update page title to show progress
        document.title = `Processing ${progress.toFixed(1)}% - ${message}`;
        
    } else {
        console.log('‚ö†Ô∏è Unknown processing status:', data.status);
        if (progressMessage) {
            progressMessage.textContent = `Status: ${data.status}`;
        }
    }
}

function showProcessingError(errorMessage, showRetryButton = false) {
    console.error('üí• Showing processing error:', errorMessage);
    
    // Clear polling interval
    if (window.processingProgressInterval) {
        clearInterval(window.processingProgressInterval);
        window.processingProgressInterval = null;
    }
    
    const progressBar = document.getElementById('processingProgressBar');
    const progressPercent = document.getElementById('processingPercent');
    const progressMessage = document.getElementById('processingMessage');
    
    // Update UI to show error
    if (progressBar) {
        progressBar.style.width = '0%';
        progressBar.style.backgroundColor = '#dc2626'; // Red color
    }
    if (progressPercent) {
        progressPercent.textContent = 'Error';
        progressPercent.style.color = '#dc2626';
    }
    
    if (progressMessage) {
        progressMessage.innerHTML = showRetryButton ? 
            `‚ùå ${errorMessage}<br>
             <button onclick="cancelProcessing()" class="mt-2 px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700">
                üõë Cancel & Reset
             </button>
             <button onclick="location.reload()" class="mt-2 ml-2 px-3 py-1 bg-gray-600 text-white text-xs rounded hover:bg-gray-700">
                ‚Üª Refresh Page
             </button>` :
            `‚ùå ${errorMessage}`;
        progressMessage.style.color = '#dc2626';
    }
    
    // Update page title
    document.title = 'Processing Failed - Person Extraction Error';
}

function cancelProcessing() {
    const videoId = {{ video.id }};
    
    console.log('üõë Cancelling processing for video:', videoId);
    
    // Show loading state
    const progressMessage = document.getElementById('processingMessage');
    if (progressMessage) {
        progressMessage.innerHTML = 'üõë Cancelling processing...';
        progressMessage.style.color = '#dc2626';
    }
    
    // Make POST request to cancel processing
    fetch(`/videos/${videoId}/cancel-processing`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        }
    })
    .then(response => {
        if (response.ok) {
            console.log('‚úÖ Successfully cancelled processing');
            location.reload();
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    })
    .catch(error => {
        console.error('‚ùå Error cancelling processing:', error);
        if (progressMessage) {
            progressMessage.innerHTML = `‚ùå Failed to cancel processing: ${error.message}<br>
                <button onclick="cancelProcessing()" class="mt-2 px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700">
                    üõë Try Again
                </button>`;
        }
    });
}

function retryProcessing() {
    const videoId = {{ video.id }};
    
    console.log('üîÑ Retrying person extraction for video:', videoId);
    
    // Show loading state
    const progressMessage = document.getElementById('processingMessage');
    if (progressMessage) {
        progressMessage.innerHTML = 'üîÑ Restarting person extraction...';
        progressMessage.style.color = '#2563eb';
    }
    
    // Make POST request to restart processing
    fetch(`/videos/${videoId}/process`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: 'extract_persons=true&face_recognition=false&extract_frames=false'
    })
    .then(response => {
        if (response.ok) {
            console.log('‚úÖ Successfully restarted person extraction');
            // Restart progress tracking
            setTimeout(() => {
                location.reload();
            }, 1000);
        } else {
            throw new Error(`HTTP ${response.status}`);
        }
    })
    .catch(error => {
        console.error('‚ùå Error restarting processing:', error);
        if (progressMessage) {
            progressMessage.innerHTML = `‚ùå Failed to restart processing: ${error.message}<br>
                <button onclick="retryProcessing()" class="mt-2 px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700">
                    üîÑ Try Again
                </button>`;
        }
    });
}

// Add video event listeners
document.addEventListener('DOMContentLoaded', function() {
    const video = document.getElementById('videoPlayer');
    if (video) {
        video.addEventListener('loadstart', function() {
            console.log('Video load started');
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.remove('hidden');
        });
        
        video.addEventListener('canplay', function() {
            console.log('Video can start playing');
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.add('hidden');
        });
        
        video.addEventListener('error', function(e) {
            console.log('Video error:', e);
            handleVideoError();
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.add('hidden');
        });
        
        video.addEventListener('stalled', function() {
            console.log('Video stalled');
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.remove('hidden');
        });
        
        video.addEventListener('waiting', function() {
            console.log('Video waiting for data');
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.remove('hidden');
        });
        
        video.addEventListener('playing', function() {
            console.log('Video is playing');
            const loading = document.getElementById('videoLoading');
            if (loading) loading.classList.add('hidden');
        });
    }
});

// Debug functionality
let debugApiCallCount = 0;

function updateDebugInfo(data) {
    debugApiCallCount++;
    const now = new Date().toLocaleTimeString();
    
    // Update debug panel elements
    const debugStatus = document.getElementById('debugStatus');
    const debugProgress = document.getElementById('debugProgress');
    const debugMessage = document.getElementById('debugMessage');
    const debugLastUpdate = document.getElementById('debugLastUpdate');
    const debugApiCalls = document.getElementById('debugApiCalls');
    const debugTaskId = document.getElementById('debugTaskId');
    
    if (debugStatus) debugStatus.textContent = data.status || 'Unknown';
    if (debugProgress) debugProgress.textContent = data.progress ? `${data.progress.toFixed(1)}%` : '0%';
    if (debugMessage) debugMessage.textContent = data.progress_message || 'No message';
    if (debugLastUpdate) debugLastUpdate.textContent = now;
    if (debugApiCalls) debugApiCalls.textContent = debugApiCallCount;
    if (debugTaskId) debugTaskId.textContent = data.task_id || 'None';
    
    // Update WebSocket status
    const debugWebSocket = document.getElementById('debugWebSocket');
    const debugConnection = document.getElementById('debugConnection');
    
    if (debugWebSocket && socket) {
        debugWebSocket.textContent = socket.connected ? 'Connected' : 'Disconnected';
        debugWebSocket.style.color = socket.connected ? 'green' : 'red';
    }
    
    if (debugConnection) {
        debugConnection.textContent = socket && socket.connected ? 'WebSocket' : 'AJAX Polling';
        debugConnection.style.color = socket && socket.connected ? 'green' : 'orange';
    }
    
    console.log('üîß Debug info updated:', {
        status: data.status,
        progress: data.progress,
        message: data.progress_message,
        apiCalls: debugApiCallCount,
        websocket: socket ? socket.connected : false,
        time: now
    });
}

function toggleDebugPanel() {
    const debugPanel = document.getElementById('debugPanel');
    if (debugPanel) {
        const isVisible = !debugPanel.classList.contains('hidden');
        if (isVisible) {
            debugPanel.classList.add('hidden');
        } else {
            debugPanel.classList.remove('hidden');
        }
        
        // Update button text
        const button = debugPanel.querySelector('button[onclick="toggleDebugPanel()"]');
        if (button) {
            button.textContent = isVisible ? 'Show Debug' : 'Hide Debug';
        }
        
        console.log(`üîß Debug panel ${isVisible ? 'hidden' : 'shown'}`);
    }
}

// Person detection and identification functionality
function jumpToDetection(timestamp, detectionId, bboxX, bboxY, bboxWidth, bboxHeight) {
    console.log(`üéØ Jumping to detection ${detectionId} at ${timestamp}s`);
    console.log(`üìä Parameters: timestamp=${timestamp}, detectionId=${detectionId}, bbox=[${bboxX}, ${bboxY}, ${bboxWidth}x${bboxHeight}]`);
    
    const video = document.getElementById('videoPlayer');
    if (!video) {
        console.error('‚ùå Video player not found');
        alert('Video player not found!');
        return;
    }
    
    // Validate parameters
    if (isNaN(timestamp) || timestamp < 0) {
        console.error('‚ùå Invalid timestamp:', timestamp);
        alert('Invalid timestamp: ' + timestamp);
        return;
    }
    
    if (isNaN(bboxX) || isNaN(bboxY) || isNaN(bboxWidth) || isNaN(bboxHeight)) {
        console.error('‚ùå Invalid bounding box coordinates:', { bboxX, bboxY, bboxWidth, bboxHeight });
        alert('Invalid bounding box coordinates');
        return;
    }
    
    // Wait for video metadata to be loaded
    if (video.readyState < 1) {
        console.log('‚è≥ Waiting for video metadata to load...');
        video.addEventListener('loadedmetadata', function() {
            performJump();
        }, { once: true });
    } else {
        performJump();
    }
    
    function performJump() {
        console.log(`üé¨ Video duration: ${video.duration}s, seeking to: ${timestamp}s`);
        
        // Validate timestamp against video duration
        if (timestamp > video.duration) {
            console.warn('‚ö†Ô∏è Timestamp exceeds video duration, adjusting...');
            timestamp = Math.min(timestamp, video.duration - 0.1);
        }
        
        // Jump to the timestamp
        video.currentTime = timestamp;
        
        // Play video if paused
        if (video.paused) {
            video.play().catch(e => console.log('Could not auto-play video:', e));
        }
        
        // Highlight the detection in the table
        highlightDetectionRow(detectionId);
        
        // Show bounding box overlay (if video container supports it)
        showBoundingBox(bboxX, bboxY, bboxWidth, bboxHeight, timestamp);
        
        // Scroll video into view
        video.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        console.log('‚úÖ Jump to detection completed');
    }
}

function highlightDetectionRow(detectionId) {
    // Remove existing highlights
    const allRows = document.querySelectorAll('tbody tr');
    allRows.forEach(row => {
        row.classList.remove('bg-blue-50', 'border-blue-200');
    });
    
    // Find and highlight the current detection row
    // This is a simple approach - in production you might want to add data attributes
    const rows = document.querySelectorAll('tbody tr');
    const detectionIndex = Array.from(rows).findIndex(row => {
        const actionCell = row.querySelector('td:last-child');
        return actionCell && actionCell.innerHTML.includes(`identifyPerson(${detectionId})`);
    });
    
    if (detectionIndex >= 0 && rows[detectionIndex]) {
        rows[detectionIndex].classList.add('bg-blue-50', 'border-blue-200');
        rows[detectionIndex].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
}

function showBoundingBox(bboxX, bboxY, bboxWidth, bboxHeight, timestamp) {
    console.log(`üì¶ Showing bounding box: ${bboxX}, ${bboxY}, ${bboxWidth}x${bboxHeight}`);
    
    const video = document.getElementById('videoPlayer');
    if (!video) {
        console.error('‚ùå Video element not found for bounding box');
        return;
    }
    
    // Wait for video to be ready
    if (video.readyState < 1 || video.videoWidth === 0) {
        console.log('‚è≥ Waiting for video to load before showing bounding box...');
        video.addEventListener('loadedmetadata', function() {
            showBoundingBox(bboxX, bboxY, bboxWidth, bboxHeight, timestamp);
        }, { once: true });
        return;
    }
    
    // Remove existing bounding box
    const existingBox = document.getElementById('boundingBox');
    if (existingBox) {
        existingBox.remove();
    }
    
    // Get video container
    const videoContainer = video.parentElement;
    if (!videoContainer) {
        console.error('‚ùå Video container not found');
        return;
    }
    
    // Create bounding box overlay
    const boundingBox = document.createElement('div');
    boundingBox.id = 'boundingBox';
    boundingBox.style.position = 'absolute';
    boundingBox.style.border = '3px solid #ef4444';
    boundingBox.style.background = 'rgba(239, 68, 68, 0.1)';
    boundingBox.style.pointerEvents = 'none';
    boundingBox.style.zIndex = '10';
    boundingBox.style.borderRadius = '4px';
    boundingBox.style.transition = 'all 0.3s ease';
    
    // Add label
    const label = document.createElement('div');
    label.style.position = 'absolute';
    label.style.top = '-25px';
    label.style.left = '0';
    label.style.background = '#ef4444';
    label.style.color = 'white';
    label.style.padding = '2px 6px';
    label.style.fontSize = '12px';
    label.style.borderRadius = '4px';
    label.style.whiteSpace = 'nowrap';
    label.textContent = `Person at ${timestamp.toFixed(1)}s`;
    boundingBox.appendChild(label);
    
    // Position the container relatively
    videoContainer.style.position = 'relative';
    
    // Function to update bounding box position and size
    function updateBoundingBox() {
        const videoRect = video.getBoundingClientRect();
        const containerRect = videoContainer.getBoundingClientRect();
        
        // Calculate actual video display dimensions (accounting for aspect ratio)
        const videoAspectRatio = video.videoWidth / video.videoHeight;
        const containerAspectRatio = videoRect.width / videoRect.height;
        
        let displayWidth, displayHeight, offsetX, offsetY;
        
        if (containerAspectRatio > videoAspectRatio) {
            // Video is pillarboxed (black bars on sides)
            displayHeight = videoRect.height;
            displayWidth = displayHeight * videoAspectRatio;
            offsetX = (videoRect.width - displayWidth) / 2;
            offsetY = 0;
        } else {
            // Video is letterboxed (black bars on top/bottom)
            displayWidth = videoRect.width;
            displayHeight = displayWidth / videoAspectRatio;
            offsetX = 0;
            offsetY = (videoRect.height - displayHeight) / 2;
        }
        
        // Convert percentage-based bounding box to pixels
        const boxLeft = offsetX + (bboxX / 100) * displayWidth;
        const boxTop = offsetY + (bboxY / 100) * displayHeight;
        const boxWidth = (bboxWidth / 100) * displayWidth;
        const boxHeight = (bboxHeight / 100) * displayHeight;
        
        // Position relative to video container
        boundingBox.style.left = `${boxLeft}px`;
        boundingBox.style.top = `${boxTop}px`;
        boundingBox.style.width = `${boxWidth}px`;
        boundingBox.style.height = `${boxHeight}px`;
    }
    
    // Add bounding box to container
    videoContainer.appendChild(boundingBox);
    
    // Update position when video metadata loads
    if (video.readyState >= 1) {
        updateBoundingBox();
    } else {
        video.addEventListener('loadedmetadata', updateBoundingBox, { once: true });
    }
    
    // Update position on window resize
    window.addEventListener('resize', updateBoundingBox);
    
    // Auto-hide bounding box after 10 seconds
    setTimeout(() => {
        if (boundingBox && boundingBox.parentElement) {
            boundingBox.style.opacity = '0';
            setTimeout(() => {
                if (boundingBox && boundingBox.parentElement) {
                    boundingBox.remove();
                }
            }, 300);
        }
    }, 10000);
    
    // Hide bounding box when video time changes significantly
    let lastTime = timestamp;
    function checkVideoTime() {
        if (Math.abs(video.currentTime - lastTime) > 2) {
            if (boundingBox && boundingBox.parentElement) {
                boundingBox.style.opacity = '0';
                setTimeout(() => {
                    if (boundingBox && boundingBox.parentElement) {
                        boundingBox.remove();
                    }
                }, 300);
            }
            video.removeEventListener('timeupdate', checkVideoTime);
        }
    }
    video.addEventListener('timeupdate', checkVideoTime);
}

function identifyPerson(detectionId) {
    console.log(`üë§ Identifying person in detection ${detectionId}`);
    
    // Simple identification modal (you can enhance this)
    const employeeName = prompt('Enter employee name for identification:');
    
    if (employeeName && employeeName.trim()) {
        console.log(`‚úÖ Identifying detection ${detectionId} as: ${employeeName}`);
        
        // Here you would typically make an API call to save the identification
        // For now, we'll just show a success message
        alert(`Person identified as: ${employeeName}\n\nNote: Full identification functionality requires backend API implementation.`);
        
        // You could implement this API call:
        /*
        fetch(`/api/detections/${detectionId}/identify`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                employee_name: employeeName
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Refresh the page or update the UI
                location.reload();
            }
        });
        */
    }
}

// Helper function to format timestamp for display
function formatTimestamp(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

// Test function to simulate progress updates (Development/Debug only)
function testProgressUI() {
    console.log('üß™ Testing progress UI updates...');
    
    const progressSteps = [
        { progress: 10, message: 'Extracting video metadata...' },
        { progress: 25, message: 'Initializing person detection...' },
        { progress: 40, message: 'Analyzing video frames...' },
        { progress: 60, message: 'Detecting persons in video...' },
        { progress: 75, message: 'Processing detection results...' },
        { progress: 90, message: 'Saving detection data...' },
        { progress: 100, message: 'Person extraction completed!' }
    ];
    
    let stepIndex = 0;
    const testInterval = setInterval(() => {
        if (stepIndex >= progressSteps.length) {
            clearInterval(testInterval);
            console.log('üß™ Progress UI test completed');
            return;
        }
        
        const step = progressSteps[stepIndex];
        const testData = {
            status: stepIndex === progressSteps.length - 1 ? 'completed' : 'processing',
            progress: step.progress,
            progress_message: step.message
        };
        
        console.log(`üß™ Test step ${stepIndex + 1}: ${step.progress}% - ${step.message}`);
        updateProcessingUI(testData);
        
        stepIndex++;
    }, 1000); // Update every second for testing
}

// Add keyboard shortcuts for detection navigation
document.addEventListener('keydown', function(event) {
    // Only work when video is focused or no input is focused
    if (document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') {
        return;
    }
    
    const video = document.getElementById('videoPlayer');
    if (!video) return;
    
    switch(event.key) {
        case 'ArrowLeft':
            // Jump backward 5 seconds
            video.currentTime = Math.max(0, video.currentTime - 5);
            event.preventDefault();
            break;
        case 'ArrowRight':
            // Jump forward 5 seconds
            video.currentTime = Math.min(video.duration, video.currentTime + 5);
            event.preventDefault();
            break;
        case ' ':
            // Space to play/pause
            if (video.paused) {
                video.play();
            } else {
                video.pause();
            }
            event.preventDefault();
            break;
    }
});

// Initialize debug panel visibility
document.addEventListener('DOMContentLoaded', function() {
    const videoStatus = '{{ video.status }}';
    const debugPanel = document.getElementById('debugPanel');
    
    // Show debug panel by default when converting
    if (videoStatus === 'converting' && debugPanel) {
        debugPanel.classList.remove('hidden');
        console.log('üîß Debug panel initialized and visible');
    }
    
    // Log available detections for debugging
    const detectionRows = document.querySelectorAll('tbody tr');
    console.log(`üìä Found ${detectionRows.length} detection rows in table`);
    
    // Add fallback event handlers for detection buttons using data attributes
    document.addEventListener('click', function(event) {
        const button = event.target.closest('button[data-detection-id]');
        if (button && button.textContent.includes('üéØ Go to Frame')) {
            event.preventDefault();
            
            const detectionId = parseInt(button.dataset.detectionId);
            const timestamp = parseFloat(button.dataset.timestamp);
            const bboxX = parseInt(button.dataset.bboxX);
            const bboxY = parseInt(button.dataset.bboxY);
            const bboxWidth = parseInt(button.dataset.bboxWidth);
            const bboxHeight = parseInt(button.dataset.bboxHeight);
            
            console.log('üîÑ Using fallback event handler for jumpToDetection');
            jumpToDetection(timestamp, detectionId, bboxX, bboxY, bboxWidth, bboxHeight);
        }
    });
});

</script>
{% endblock %}